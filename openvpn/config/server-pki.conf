port 1194
proto udp

# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
dev tun

# SSL/TLS root certificate (ca), certificate
# (cert), and private key (key).  Each client
# and the server must have their own cert and
# key file.  The server and all clients will
# use the same ca file.
#
# See the "easy-rsa" directory for a series
# of scripts for generating RSA certificates
# and private keys.  Remember to use
# a unique Common Name for the server
# and each of the client certificates.
#
# Any X509 key management system can be used.
# OpenVPN can also use a PKCS #12 formatted key file
# (see "pkcs12" directive in man page).
ca ca.crt
cert server.crt
key server.key
dh dh.pem
server 192.168.88.0 255.255.255.0
ifconfig-pool-persist /tmp/ipp.txt

# Push routes to the client to allow it
# to reach other private subnets behind
# the server.
push "route 192.168.99.0 255.255.255.0"
push "route 172.16.254.0 255.255.255.0"

tls-auth my.key 0
cipher AES-256-CBC

# Enable compression on the VPN link and push the option to the client
compress lzo
push "compress lzo"
;push "compress lz4-v2"

status /tmp/openvpn-status.log
log    /tmp/openvpn.log
# Set the appropriate level of log
# file verbosity.
#
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
verb 3

keepalive 15 120
explicit-exit-notify 1

# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN

push "redirect-gateway def1 bypass-dhcp"
# The OpenVPN server machine may need to NAT
# or bridge the TUN/TAP interface to the internet
# in order for this to work properly.
# iptables -t nat -A POSTROUTING -s 192.168.88.0/24 -o eth0 -j MASQUERADE
